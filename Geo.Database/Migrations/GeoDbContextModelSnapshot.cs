// <auto-generated />
using System;
using Geo.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Geo.Database.Migrations
{
    [DbContext(typeof(GeoDbContext))]
    partial class GeoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Geo.Domain.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4881069-cda3-4090-af04-59e14b02c79b"),
                            CountryId = new Guid("4271dbda-c486-4bb9-9394-87e84cd117c3"),
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = new Guid("5270ad72-e141-49d5-b431-316a11ebd821"),
                            CountryId = new Guid("4271dbda-c486-4bb9-9394-87e84cd117c3"),
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = new Guid("1dd4170a-af2a-46be-adba-5adf1431bc67"),
                            CountryId = new Guid("2bc11ff0-30e6-4fc8-a5f5-4232dd173964"),
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = new Guid("3b68e94c-f2df-4a3a-bc4e-f2daa23c3e73"),
                            CountryId = new Guid("2bc11ff0-30e6-4fc8-a5f5-4232dd173964"),
                            Name = "Split"
                        });
                });

            modelBuilder.Entity("Geo.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alpha2Code")
                        .HasColumnType("text");

                    b.Property<string>("Alpha3Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4271dbda-c486-4bb9-9394-87e84cd117c3"),
                            Alpha2Code = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("2bc11ff0-30e6-4fc8-a5f5-4232dd173964"),
                            Alpha2Code = "HR",
                            Name = "Country"
                        });
                });

            modelBuilder.Entity("Geo.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Geo.Domain.City", b =>
                {
                    b.HasOne("Geo.Domain.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Geo.Domain.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
