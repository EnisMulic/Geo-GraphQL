// <auto-generated />
using System;
using Geo.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Geo.Database.Migrations
{
    [DbContext(typeof(GeoDbContext))]
    [Migration("20210313131143_addAlphaCodesCountry")]
    partial class addAlphaCodesCountry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Geo.Domain.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88ba9053-c75d-4c0b-988e-373c08da106b"),
                            CountryId = new Guid("369dcb64-6669-41b2-a711-90f0b875e63e"),
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = new Guid("a51f4a7e-1de3-49ab-b323-fc58d835ba73"),
                            CountryId = new Guid("369dcb64-6669-41b2-a711-90f0b875e63e"),
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = new Guid("a4a5a468-9003-46ed-a60d-8023a10292f7"),
                            CountryId = new Guid("9c148912-ed05-4938-bc53-2db73e62661d"),
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = new Guid("247bf3a3-965c-433b-bf44-8b6e7610dfc4"),
                            CountryId = new Guid("9c148912-ed05-4938-bc53-2db73e62661d"),
                            Name = "Split"
                        });
                });

            modelBuilder.Entity("Geo.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alpha2Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alpha3Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("369dcb64-6669-41b2-a711-90f0b875e63e"),
                            Alpha2Code = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("9c148912-ed05-4938-bc53-2db73e62661d"),
                            Alpha2Code = "HR",
                            Name = "Country"
                        });
                });

            modelBuilder.Entity("Geo.Domain.City", b =>
                {
                    b.HasOne("Geo.Domain.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Geo.Domain.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
